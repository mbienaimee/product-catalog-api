swagger: '2.0'
info:
  title: Product Catalog API
  description: API for managing product catalog with authentication, products, and categories
  version: 1.0.0
  
host: localhost:5000
basePath: /api
schemes:
  - http
  
consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: Enter 'Bearer ' followed by your token

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account
      tags:
        - Authentication
      parameters:
        - name: user
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - email
              - password
            properties:
              name:
                type: string
                example: John Doe
              email:
                type: string
                format: email
                example: john@example.com
              password:
                type: string
                format: password
                example: password123
      responses:
        201:
          description: User registered successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: User registered successfully
              data:
                type: object
                properties:
                  id:
                    type: string
                    example: 60d21b4667d0d8992e610c85
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: john@example.com
                  role:
                    type: string
                    example: user
        400:
          description: Bad request - Email already in use
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Email already in use
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /auth/login:
    post:
      summary: Login a user
      description: Authenticates a user and returns a JWT token
      tags:
        - Authentication
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                type: string
                format: email
                example: john@example.com
              password:
                type: string
                format: password
                example: password123
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
              user:
                type: object
                properties:
                  id:
                    type: string
                    example: 60d21b4667d0d8992e610c85
                  name:
                    type: string
                    example: John Doe
                  email:
                    type: string
                    example: john@example.com
                  role:
                    type: string
                    example: user
        401:
          description: Unauthorized - Invalid credentials
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Invalid credentials
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /auth/me:
    get:
      summary: Get current user
      description: Returns information about the currently authenticated user
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        200:
          description: User information retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/User'
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        404:
          description: User not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: User not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /products:
    get:
      summary: Get all products
      description: Returns a list of all products with optional filtering
      tags:
        - Products
      parameters:
        - name: name
          in: query
          type: string
          required: false
          description: Filter products by name (case-insensitive)
        - name: category
          in: query
          type: string
          required: false
          description: Filter products by category ID
        - name: minPrice
          in: query
          type: number
          required: false
          description: Filter products with price greater than or equal to minPrice
        - name: maxPrice
          in: query
          type: number
          required: false
          description: Filter products with price less than or equal to maxPrice
        - name: inStock
          in: query
          type: boolean
          required: false
          description: Filter products that are in stock (stockQuantity > 0)
      responses:
        200:
          description: List of products retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              count:
                type: integer
                example: 2
              data:
                type: array
                items:
                  $ref: '#/definitions/Product'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    post:
      summary: Create a new product
      description: Creates a new product (admin only)
      tags:
        - Products
      security:
        - BearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: name
          in: formData
          type: string
          required: true
          description: Product name
        - name: description
          in: formData
          type: string
          required: false
          description: Product description
        - name: price
          in: formData
          type: number
          required: true
          description: Product price
        - name: category
          in: formData
          type: string
          required: false
          description: Product category ID
        - name: stockQuantity
          in: formData
          type: integer
          required: true
          description: Available stock quantity
        - name: variants
          in: formData
          type: string
          required: false
          description: JSON string of product variants
        - name: images
          in: formData
          type: file
          required: false
          description: Product images (up to 5)
      responses:
        201:
          description: Product created successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Product'
        400:
          description: Bad request - Invalid inputs or category not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category not found
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /products/low-stock:
    get:
      summary: Get low stock products
      description: Returns products with low stock quantity (admin only)
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: threshold
          in: query
          type: integer
          required: false
          description: Stock threshold (default is 10)
      responses:
        200:
          description: Low stock products retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              count:
                type: integer
                example: 3
              data:
                type: array
                items:
                  $ref: '#/definitions/Product'
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /products/{id}:
    get:
      summary: Get a product by ID
      description: Returns details of a specific product
      tags:
        - Products
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Product ID
      responses:
        200:
          description: Product retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Product'
        404:
          description: Product not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Product not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    put:
      summary: Update a product
      description: Updates an existing product (admin only)
      tags:
        - Products
      security:
        - BearerAuth: []
      consumes:
        - multipart/form-data
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Product ID
        - name: name
          in: formData
          type: string
          required: false
          description: Product name
        - name: description
          in: formData
          type: string
          required: false
          description: Product description
        - name: price
          in: formData
          type: number
          required: false
          description: Product price
        - name: category
          in: formData
          type: string
          required: false
          description: Product category ID
        - name: stockQuantity
          in: formData
          type: integer
          required: false
          description: Available stock quantity
        - name: variants
          in: formData
          type: string
          required: false
          description: JSON string of product variants
        - name: images
          in: formData
          type: file
          required: false
          description: Product images (up to 5) - will replace existing images
      responses:
        200:
          description: Product updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Product'
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        404:
          description: Product not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Product not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    delete:
      summary: Delete a product
      description: Deletes a product (admin only)
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Product ID
      responses:
        200:
          description: Product deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
                example: {}
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        404:
          description: Product not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Product not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /categories:
    get:
      summary: Get all categories
      description: Returns a list of all categories
      tags:
        - Categories
      responses:
        200:
          description: Categories retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              count:
                type: integer
                example: 3
              data:
                type: array
                items:
                  $ref: '#/definitions/Category'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    post:
      summary: Create a new category
      description: Creates a new category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: category
          in: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: Electronics
              description:
                type: string
                example: Electronic devices and gadgets
      responses:
        201:
          description: Category created successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Category'
        400:
          description: Bad request - Category name already exists
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category name already exists
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
  
  /categories/{id}:
    get:
      summary: Get a category by ID
      description: Returns details of a specific category
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Category ID
      responses:
        200:
          description: Category retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Category'
        404:
          description: Category not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    put:
      summary: Update a category
      description: Updates an existing category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Category ID
        - name: category
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                example: Electronics Updated
              description:
                type: string
                example: Updated description for electronics
      responses:
        200:
          description: Category updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                $ref: '#/definitions/Category'
        400:
          description: Bad request - Category name already exists
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category name already exists
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        404:
          description: Category not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'
    
    delete:
      summary: Delete a category
      description: Deletes a category (admin only)
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          type: string
          required: true
          description: Category ID
      responses:
        200:
          description: Category deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: object
                example: {}
        400:
          description: Bad request - Cannot delete category with associated products
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Cannot delete category with associated products
        401:
          description: Unauthorized - No token or invalid token
          schema:
            $ref: '#/definitions/UnauthorizedError'
        403:
          description: Forbidden - Not an admin
          schema:
            $ref: '#/definitions/ForbiddenError'
        404:
          description: Category not found
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: Category not found
        500:
          description: Server error
          schema:
            $ref: '#/definitions/Error'

definitions:
  User:
    type: object
    properties:
      _id:
        type: string
        example: 60d21b4667d0d8992e610c85
      name:
        type: string
        example: John Doe
      email:
        type: string
        example: john@example.com
      role:
        type: string
        enum: [user, admin]
        example: user
      isActive:
        type: boolean
        example: true
      createdAt:
        type: string
        format: date-time
        example: 2023-06-22T10:30:40.000Z
      updatedAt:
        type: string
        format: date-time
        example: 2023-06-22T10:30:40.000Z
  
  Product:
    type: object
    properties:
      _id:
        type: string
        example: 60d21b4667d0d8992e610c86
      name:
        type: string
        example: Samsung Galaxy S21
      description:
        type: string
        example: Latest Samsung smartphone with awesome features
      price:
        type: number
        example: 899.99
      discountedPrice:
        type: number
        example: 809.99
      category:
        $ref: '#/definitions/Category'
      stockQuantity:
        type: integer
        example: 50
      variants:
        type: array
        items:
          type: object
          properties:
            size:
              type: string
              example: 128GB
            color:
              type: string
              example: Phantom Black
            stock:
              type: integer
              example: 20
      images:
        type: array
        items:
          type: string
          example: /uploads/images-1623456789000.jpg
      isActive:
        type: boolean
        example: true
      discount:
        type: number
        example: 10
      sku:
        type: string
        example: SAMS21-128GB-BLK
      createdAt:
        type: string
        format: date-time
        example: 2023-06-22T10:35:40.000Z
      updatedAt:
        type: string
        format: date-time
        example: 2023-06-22T10:35:40.000Z
  
  Category:
    type: object
    properties:
      _id:
        type: string
        example: 60d21b4667d0d8992e610c87
      name:
        type: string
        example: Electronics
      description:
        type: string
        example: Electronic devices and gadgets
      createdAt:
        type: string
        format: date-time
        example: 2023-06-22T10:40:40.000Z
      updatedAt:
        type: string
        format: date-time
        example: 2023-06-22T10:40:40.000Z
  
  Error:
    type: object
    properties:
      success:
        type: boolean
        example: false
      message:
        type: string
        example: Server Error
  
  UnauthorizedError:
    type: object
    properties:
      success:
        type: boolean
        example: false
      message:
        type: string
        example: No token, authorization denied
  
  ForbiddenError:
    type: object
    properties:
      success:
        type: boolean
        example: false
      message:
        type: string
        example: Access denied: Admin privileges required