openapi: 3.0.0
info:
  title: E-Commerce API
  description: API for managing products, categories, inventory, and users
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Development server

components:
  schemas:
    Category:
      type: object
      required:
        - name
      properties:
        _id:
          type: string
          description: Category unique identifier
        name:
          type: string
          description: Category name
        description:
          type: string
          description: Category description
        parentCategory:
          type: string
          description: Parent category ID
          nullable: true
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    CategoryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Category created successfully"
        category:
          $ref: "#/components/schemas/Category"

    CategoriesListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"

    Product:
      type: object
      required:
        - name
        - price
        - category
        - stockQuantity
      properties:
        _id:
          type: string
          description: Product unique identifier
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          description: Product price
        category:
          type: string
          description: Category ID
        stockQuantity:
          type: integer
          description: Available stock quantity
        imageUrls:
          type: array
          items:
            type: string
          description: Product image URLs
        variants:
          type: array
          items:
            type: object
            properties:
              size:
                type: string
              color:
                type: string
              price:
                type: number
              stockQuantity:
                type: integer
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Product created successfully"
        product:
          $ref: "#/components/schemas/Product"

    ProductsListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        total:
          type: integer
          description: Total number of products
        page:
          type: integer
          description: Current page number
        pages:
          type: integer
          description: Total number of pages

    Inventory:
      type: object
      required:
        - productId
        - quantity
      properties:
        _id:
          type: string
          description: Inventory record unique identifier
        productId:
          type: string
          description: Product ID
        quantity:
          type: integer
          description: Current stock quantity
        lowStockThreshold:
          type: integer
          description: Threshold for low stock alerts
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    InventoryInput:
      type: object
      required:
        - productId
        - quantity
        - lowStockThreshold
      properties:
        productId:
          type: string
          description: Product ID
        quantity:
          type: integer
          description: Initial stock quantity
        lowStockThreshold:
          type: integer
          description: Threshold for low stock alerts

    InventoryResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Inventory updated successfully"
        inventory:
          $ref: "#/components/schemas/Inventory"

    User:
      type: object
      required:
        - name
        - email
        - password
      properties:
        _id:
          type: string
          description: User unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        role:
          type: string
          enum: [admin, seller, customer]
          description: User role
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: [admin, seller, customer]

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          description: JWT authentication token
        user:
          $ref: "#/components/schemas/User"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
        stack:
          type: string
          description: Error stack trace (development only)

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/profile:
    get:
      summary: Get user profile
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /categories:
    post:
      summary: Create a new category
      tags:
        - Categories
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Smartphones"
                description:
                  type: string
                  example: "Mobile phones with advanced computing capability"
                parentCategory:
                  type: string
                  example: "67e05a3b0c765f3f556e271d"
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
              examples:
                categoryCreated:
                  value:
                    success: true
                    message: "Category created successfully"
                    category:
                      _id: "67e05a3b0c765f3f556e271d"
                      name: "Smartphones"
                      description: "Mobile phones with advanced computing capability"
                      parentCategory: null
                      createdAt: "2025-03-23T19:39:54.517Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get all categories
      tags:
        - Categories
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoriesListResponse"
              examples:
                emptyCategories:
                  value:
                    success: true
                    categories: []
                categoriesList:
                  value:
                    success: true
                    categories:
                      [
                        {
                          "_id": "67e05a3b0c765f3f556e271d",
                          "name": "Smartphones",
                          "description": "Mobile phones with advanced computing capability",
                          "parentCategory": null,
                          "createdAt": "2025-03-23T19:39:54.517Z",
                        },
                      ]

  /categories/{id}:
    get:
      summary: Get category by ID
      tags:
        - Categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      responses:
        "200":
          description: Category details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                parentCategory:
                  type: string
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete category
      tags:
        - Categories
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Category ID
      responses:
        "200":
          description: Category deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Category deleted successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Category not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /products:
    post:
      summary: Create a new product
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - price
                - category
                - stockQuantity
              properties:
                name:
                  type: string
                  example: "iPhone 15"
                description:
                  type: string
                  example: "Latest iPhone model with advanced features"
                price:
                  type: number
                  example: 999.99
                category:
                  type: string
                  example: "67e05a3b0c765f3f556e271d"
                stockQuantity:
                  type: integer
                  example: 100
                imageUrls:
                  type: array
                  items:
                    type: string
                  example: ["https://example.com/iphone15.jpg"]
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      size:
                        type: string
                      color:
                        type: string
                      price:
                        type: number
                      stockQuantity:
                        type: integer
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "400":
          description: Bad request - Invalid product data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get all products
      tags:
        - Products
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter by category ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Maximum number of items to return
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductsListResponse"

  /products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update product
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                category:
                  type: string
                stockQuantity:
                  type: integer
                imageUrls:
                  type: array
                  items:
                    type: string
                variants:
                  type: array
                  items:
                    type: object
                    properties:
                      size:
                        type: string
                      color:
                        type: string
                      price:
                        type: number
                      stockQuantity:
                        type: integer
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete product
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Product ID
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /inventory:
    get:
      summary: Get all inventory items
      tags:
        - Inventory
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of inventory items
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  inventory:
                    type: array
                    items:
                      $ref: "#/components/schemas/Inventory"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: Create a new inventory item
      tags:
        - Inventory
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InventoryInput"
      responses:
        "201":
          description: Inventory item created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponse"
        "400":
          description: Bad request - Invalid inventory data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /inventory/{id}:
    get:
      summary: Get a specific inventory item by ID
      tags:
        - Inventory
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Inventory ID
      responses:
        "200":
          description: Inventory item details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    patch:
      summary: Update inventory item
      tags:
        - Inventory
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Inventory ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  example: 150
                lowStockThreshold:
                  type: integer
                  example: 10
      responses:
        "200":
          description: Inventory item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InventoryResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete an inventory item
      tags:
        - Inventory
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Inventory ID
      responses:
        "200":
          description: Inventory item deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Inventory item deleted successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Inventory item not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /inventory/low-stock:
    get:
      summary: Get low-stock inventory items
      tags:
        - Inventory
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of low-stock items
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  inventory:
                    type: array
                    items:
                      $ref: "#/components/schemas/Inventory"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
